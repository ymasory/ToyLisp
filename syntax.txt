syntax:
:blah   = atom
blah    = evaluated symbol
(blah)  = function call, n-ary
'(blah) = unevaluated list, the list is just data
"blah"  = string (list of scala.Char)
3.14    = number (scala.Double)

built-in:
defn (named functions)
set (assignment)
lambda
cons, head
char-to-num, num-to-char
<=, +, floor
cond
eq
print

notes:
- arbitrary nesting supported
- no recursion
- no quoting mechanism, do we really need it given that we have unevaluated list syntax?
- everything is in one big dynamic scope and one namespace
- all evaluation is eager
- what else do we need?
